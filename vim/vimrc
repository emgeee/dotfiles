
filetype off                  " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"" Better bracket matching with %
runtime! macros/matchit.vim

""" Themes
Bundle 'altercation/vim-colors-solarized'
Bundle 'trapd00r/neverland-vim-theme'
Bundle 'nanotech/jellybeans.vim'
Plugin 'chriskempson/base16-vim'


"" additional syntax highlighting
Bundle 'sudar/vim-arduino-syntax'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'othree/javascript-libraries-syntax.vim'

"" Highligh css colors!
Bundle 'ap/vim-css-color'

"" Easy switching between vim/tmux
Bundle 'christoomey/vim-tmux-navigator'

"" Display git diffs in sidebar
Bundle 'airblade/vim-gitgutter.git'

"" Use ag (the silver searcher) to find patterns in file
Bundle 'rking/ag.vim'
" :Ag [options] {pattern} [{directory}]
" must escape # character with \
" e    to open file and close the quickfix window
" o    to open (same as enter)
" go   to preview file (open but maintain focus on ag.vim results)
" t    to open in new tab
" T    to open in new tab silently
" h    to open in horizontal split
" H    to open in horizontal split silently
" v    to open in vertical split
" gv   to open in vertical split silently
" q    to close the quickfix window


"" File navigation sidebar
Bundle 'scrooloose/nerdtree'
" type :NERDTreeToggle
" :NERDTreeFind find location of current file
" i to open in new split
" s to open in new vsplit
" t to open in new tab
" p go to parent directory
" m to open menu

"" Fuzzy file search
" Bundle 'kien/ctrlp.vim'
Bundle 'ctrlpvim/ctrlp.vim'


"" Easily jump around
Bundle 'Lokaltog/vim-easymotion'
" Press <leader><leader> then a move command where <leader> = '\'
"

"" autocomplete plugin
" ctrl-X, ctrl-N, ctrl-P, ctrl-O
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'Shougo/neocomplete.vim'

"" Comment plugin
Bundle 'tomtom/tcomment_vim'
" Press <c-_><c-_> to comment lines
" Press <c-_>i for inline commenting
"

"" Beautify HTML, css, and js
"" requires ~/.vim/.editorconfig
" Bundle 'einars/js-beautify'
Bundle 'maksimr/vim-jsbeautify'
" :call JsBeautify()
" :call HtmlBeautify()
" :call CSSBeautify()
"

"" Add indent guides
" Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'Yggdroot/indentLine'


"" Enable editorconfig in vim
Bundle 'editorconfig/editorconfig-vim'

"" Highlight matching html elements
Bundle 'gcmt/breeze.vim'
" :BreezeWhatsWrong find issues with html tags
" :BreezeMatchTag jump between html elements


"" Easily surround things
Bundle 'tpope/vim-surround'
" cs<old char><new char> - Change Surround
" ds<old char> - Delete Surround
" ys<text object><surround char> - wrap text object
" In virtual mode - S<char> - wrap current selection in <char>


" Bundle 'jiangmiao/auto-pairs.git'
Bundle 'Raimondi/delimitMate'


" Rainbow brackets!
Bundle 'luochen1990/rainbow'


"" Others
Bundle 'Shougo/vimproc.vim'
Bundle 'bling/vim-airline'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'


""" Experimental (not necessarily in workflow)
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'tpope/vim-rails.git'

" Bundle 'tpope/vim-sleuth'
" Bundle 'terryma/vim-multiple-cursors'
" Bundle 'mbbill/undotree'


"" configure tern - the javascript autocompleter
Bundle 'marijnh/tern_for_vim'
" remember to `npm install` in package directory

"" Syntax checker
Bundle 'scrooloose/syntastic'
" :Errors - show quickfix window

" Bundle 'Shougo/unite.vim'
"
" """ Sessions for Unite
" Bundle 'Shougo/unite-session'
" " :Unite session/new
" " :Unite session


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set shortmess+=I "avoid hitting enter?

set ruler "show line numbers at bottom right
set showcmd "show information about current command in bottom right
set number "show line numbers by default
set relativenumber "line numbers are show relative to position
set cursorline "highlight entire line cursor is on

"" options for searching
set hlsearch "highlight all matches
set incsearch "incremently start searching before hitting enter
set ignorecase "ignore case
set smartcase "ignore case when only lower case
set gdefault "default to global search+replace

" set textwidth=79
set formatoptions=qrn1

set mouse=a "enable mouse support
" set mouse=c "disable mouse support

set encoding=utf-8
set wildmenu

"" used for viewing lines that are so long they take up the entire screen at
"" once when wrapped
set display=lastline

"size of a hard tabstop
set tabstop=2

"size of an indent (used for << and >>)
set shiftwidth=2

"round to nearest shiftwidth
set shiftround

"Expand TABs to spaces
set expandtab

"" a combination of spaces and tabs are used to simulate tab stops at a width
"" other than the (hard)tabstop
set softtabstop=2

"set autoindent "preserves indentation

"""filetype configurations
"" turn on autoindent for arduino filetype (*.ino)
au Filetype arduino set autoindent


"" Interpret .ejs files as html
au BufNewFile,BufRead *.ejs set filetype=html

"" Set .md to markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown


"" Macvim specific settings
if has('gui_running')
  set guioptions-=T "Remove toolbar
  set guioptions-=r "Remove right side scrollbar
  set guioptions-=L "Remove right side scrollbar in NERDTree
endif


if ! has('gui_running')

  "" Fix timing issue with powerline update statusbar
  " set ttimeoutlen=10
  augroup FastEscape
    autocmd!
      au InsertEnter * set timeoutlen=200 "gimme this ms to enter jk
      au InsertLeave * set timeoutlen=1000
    augroup END
endif


""""""""""""""""""""""""""""""
" => airline
""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

"" Use powerline fonts
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h12

let g:airline_powerline_fonts = 1
set laststatus=2
set noshowmode

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups, and undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" individual filetype indenting can be configured in
" ~/.vim/after/ftplugin/<filetype>.vim
filetype plugin indent on

set backup
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

set undofile
set undodir=~/.vim/tmp/undo//
set history=700
set undolevels=700


"" Auto save when focus is lost
au FocusLost * :wa


"" Auto reload the buffer from disk if it has changed when entering
au FocusGained,BufEnter * :silent! !

""" Tell vim to remember certain things when we exit
""  '10  :  marks will be remembered for up to 10 previously edited files
""  "100 :  will save up to 100 lines for each register
""  :20  :  up to 20 lines of command-line history will be remembered
""  %    :  saves and restores the buffer list
""  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo


"" Save line postion on exit, then restore when opening file
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END


"" autoreload vimrc after save
augroup reload_vimrc
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on


"" Automatically highlight @todo
augroup HiglightTODO
  autocmd!
  autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', '@todo', -1)
augroup END


" colorscheme neverland
" colorscheme base16-default

set background=dark
if has('gui_running')
  colorscheme solarized
else
  colorscheme jellybeans
endif

highlight clear SignColumn

"" configure javascript libraries syntax
let g:used_javascript_libs = 'underscore,jquery,angularjs,angularui'

set t_Co=256 "enable 256 colors



"" Highlight trailing whitespace in vim only (not vimpager or Unite window)
if ! exists("vimpager")
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
  autocmd InsertEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
  autocmd InsertLeave * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
  autocmd BufWinLeave * if &modifiable && &ft!='unite' | call clearmatches() | endif
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Keyboard remappings
"    use `:help index` to view default bindings
"    use :map to view list of bindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set pastetoggle=<F2>


"" Remap leader key to space
let mapleader = " "
" let mapleader=","

"" Map J-K to escape
inoremap jk <Esc>

"" easily clear highlighted search - :noh
nmap <silent> <leader>h :nohlsearch<CR>

"" Strip all whitespace from file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

"" re hardwrap paragraph
nnoremap <leader>q gqip

"" reselect recent pasted text
nnoremap <leader>v V`]

"" Quickly open vimrc in new verticle window
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>


"" Toggle NERDTree
nmap <silent> <F3> :NERDTreeToggle<CR>

nmap <silent> <leader>r :RainbowToggle<CR>

noremap <silent> <leader>j :BreezeMatchTag<CR>

"" remap tab key to % for jumping to matching brackets
" nnoremap <tab> %
" vnoremap <tab> %

"" use vim magic mode instead of weird regexes
nnoremap / /\v
vnoremap / /\v

"" automatically position cursor to middle of screen
nnoremap n nzzzv
nnoremap N Nzzzv

"" move to beginning/end of line easier
noremap H ^
noremap L $


"" Navigate wrapped lines (display lines) as you'd expect
nnoremap j gj
nnoremap k gk

" Allow use of the backspace key at anytime in insert mode
set backspace=indent,eol,start

"" allow us to toggle transparency of gui!
if has('gui_running')
  function! ToggleTransparency()
    if &transparency ==? 0
      set transparency=17
    else
      set transparency=0
    endif
  endfunction

  map <D-u> :call ToggleTransparency()<CR>
endif

" :vsp - new buffer vertically
" :sp - new buffer horizontally
"" remap changing buffers
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins and utilities
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set shell=bash "needed to make vundle in fish work

""""""""""""""""""""""""""""""
" => Unit config
""""""""""""""""""""""""""""""
" " track yank history
" let g:unite_source_history_yank_enable = 1
" let g:unit_data_directory = expand('$HOME/.vim/unite/')
" let g:unite_force_overwrite_statusline = 0
"
" """ Use the silver surfer
" if executable('ag')
"   let g:unite_source_grep_command = 'ag'
"   let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
"   let g:unite_source_grep_recursive_opt = ''
" endif
"
" call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
"       \ 'ignore_pattern', join([
"       \ '\.git/',
"       \ ], '\|'))
"
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" call unite#filters#sorter_default#use(['sorter_rank'])
"
" nnoremap <silent> <C-P> :<C-u>Unite -buffer-name=files -start-insert buffer file_rec/async:!<cr>
"
" autocmd FileType unite call s:unite_settings()
"
" function! s:unite_settings()
"   let b:SuperTabDisabled=1
"   imap <buffer> <C-j>   <Plug>(unite_select_next_line)
"   imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"   imap <silent><buffer><expr> <C-x> unite#do_action('split')
"   imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
"   imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
"
"   nmap <buffer> <ESC> <Plug>(unite_exit)
" endfunction



""""""""""""""""""""""""""""""
" => vim-indent-guide config
""""""""""""""""""""""""""""""
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_guide_size = 1
" let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=23
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=0

""" indentLine
let g:indentLine_char = '│'
let g:indentLine_color_term = 239
let g:indentLine_color_tty_light = 7
let g:indentLine_color_dark = 1


""""""""""""""""""""""""""""""
" => Ctrlp config
""""""""""""""""""""""""""""""
" Set no max file limit
let g:ctrlp_max_files = 0
" Search from current directory instead of project root
let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_cmd = "CtrlPMixed"

"" Ignore these directories
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/out/**
set wildignore+=*/node_modules/**
set wildignore+=*/vendor/**

"" ignore for cordova projects
set wildignore+=*/platforms/**
set wildignore+=*/plugins/**


"" Set easy motion key
let g:EasyMotion_leader_key = '<leader><leader>'

""""""""""""""""""""""""""""""
" => Syntastic config
""""""""""""""""""""""""""""""
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_always_populate_loc_list = 1

let g:syntastic_enable_signs = 1
" let g:syntastic_html_tidy_ignore_errors=['proprietary attribute "ng-"', 'proprietary attribute "ion-"']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_html_checkers = ['jshint']
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'


""""""""""""""""""""""""""""""
" => beautifier.vim
""""""""""""""""""""""""""""""
" let g:editorconfig_Beautifier = expand('$HOME/.editorconfig')


""""""""""""""""""""""""""""""
" => rainbow
""""""""""""""""""""""""""""""
let g:rainbow_active = 0
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['darkgray', 'darkblue', 'darkmagenta', 'darkcyan'],
\   'operators': '_,_',
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\       '*': {},
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\           'ctermfgs': ['darkgray', 'darkblue', 'darkmagenta', 'darkcyan', 'darkred', 'darkgreen'],
\       },
\       'vim': {
\           'parentheses': [['fu\w* \s*.*)','endfu\w*'], ['for','endfor'], ['while', 'endwhile'], ['if','_elseif\|else_','endif'], ['(',')'], ['\[','\]'], ['{','}']],
\       },
\       'tex': {
\           'parentheses': [['(',')'], ['\[','\]'], ['\\begin{.*}','\\end{.*}']],
\       },
\       'css': 0,
\       'stylus': 0,
\   }
\}


""""""""""""""""""""""""""""""
" => gitgutter
""""""""""""""""""""""""""""""


